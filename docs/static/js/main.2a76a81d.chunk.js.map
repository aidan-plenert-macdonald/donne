{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["widgets","TextWidget","props","InputGroup","className","Prepend","Text","label","FormControl","key","id","onChange","value","target","options","emptyValue","toLowerCase","App","useState","schema","setSchema","verbs","setVerbs","undefined","verb","setVerb","randomVerb","v","Object","keys","Math","floor","random","length","useEffect","fetch","process","then","res","json","title","filteredSchema","Container","Row","validate","formData","errors","expected","forEach","tense","pronoun","addError","showErrorList","onSubmit","FieldTemplate","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Navbar","bg","variant","Brand","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0PAOMA,EAAU,CACdC,WAAY,SAACC,GACX,OACE,kBAACC,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACD,EAAA,EAAWE,QAAZ,KACE,kBAACF,EAAA,EAAWG,KAAZ,KAAkBJ,EAAMK,QAE1B,kBAACC,EAAA,EAAD,CACEC,IAAKP,EAAMQ,GACXC,SACE,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACX,OAAOV,EAAMS,SACD,KAAVC,EAAeV,EAAMY,QAAQC,WAAaH,EAAMI,qBA2FjDC,MAnFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGWJ,wBAASK,GAHpB,mBAGNC,EAHM,KAGAC,EAHA,KAIPC,EAAa,WACjB,IAAMC,EAAIC,OAAOC,KAAKR,GACtBI,EAAQE,EAAEG,KAAKC,MAAMD,KAAKE,SAAWL,EAAEM,WAkDzC,OA7BAC,qBACE,WACEC,MAAM,GAAD,OAAIC,SAAJ,uBACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIlB,EAAUkB,QACxB,IAGLJ,qBACE,WACEC,MAAM,GAAD,OAAIC,SAAJ,gBACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIhB,EAASgB,QACvB,IAGLJ,oBAAUR,EAAY,CAACL,IAEvBa,qBACE,WACE,QAAaX,IAATC,EAAoB,CACeL,EAA7BqB,MADe,IACLC,EADI,YACetB,EADf,WAEtBC,EAAUqB,QAEVrB,EAAU,2BAAKD,GAAN,IAAcqB,MAAOhB,OAE/B,CAACA,IAIJ,6BACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CACElC,IAAKe,EACLL,OAAQA,EACRyB,SAtDO,SAACC,EAAUC,GAC1B,IAAMC,EAAW1B,EAAMG,GAcvB,OAZAI,OAAOC,KAAKkB,GAAUC,SACpB,SAAAC,GACErB,OAAOC,KAAKkB,EAASE,IAAQD,SAC3B,SAAAE,GACMH,EAASE,GAAOC,KAAaL,EAASI,GAAOC,IAC/CJ,EAAOG,GAAOC,GAASC,SAAS,gBAAkBJ,EAASE,GAAOC,UAOrEJ,GAwCCM,eAAe,EACfC,SAAU3B,EACV1B,QAASA,EACTsD,cACE,SAACpD,GACC,OACE,6BACGA,EAAMqD,SACNrD,EAAM4C,eCvFPU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,4BAEF,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a76a81d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from \"@rjsf/core\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst widgets = {\n  TextWidget: (props) => {\n    return (\n      <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text>{props.label}</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          key={props.id}\n          onChange={\n            ({ target: { value } }) => {\n              return props.onChange(\n                value === \"\" ? props.options.emptyValue : value.toLowerCase());\n            }\n          } />\n      </InputGroup>\n    )\n  }\n};\n\nfunction App() {\n  const [schema, setSchema] = useState({});\n  const [verbs, setVerbs] = useState({});\n  const [verb, setVerb] = useState(undefined);\n  const randomVerb = () => {\n    const v = Object.keys(verbs);\n    setVerb(v[Math.floor(Math.random() * v.length)]);\n  }\n\n  const validate = (formData, errors) => {\n    const expected = verbs[verb];\n\n    Object.keys(expected).forEach(\n      tense => {\n        Object.keys(expected[tense]).forEach(\n          pronoun => {\n            if (expected[tense][pronoun] !== formData[tense][pronoun]) {\n              errors[tense][pronoun].addError(\"Not correct: \" + expected[tense][pronoun]);\n            }\n          }\n        )\n      }\n    )\n\n    return errors;\n  }\n\n  useEffect(\n    () => {\n      fetch(`${process.env.PUBLIC_URL}/verbs.schema.json`)\n        .then(res => res.json())\n        .then(res => setSchema(res))\n    }, []\n  );\n\n  useEffect(\n    () => {\n      fetch(`${process.env.PUBLIC_URL}/verbs.json`)\n        .then(res => res.json())\n        .then(res => setVerbs(res))\n    }, []\n  );\n\n  useEffect(randomVerb, [verbs]);\n\n  useEffect(\n    () => {\n      if (verb === undefined) {\n        const { title, ...filteredSchema } = schema;\n        setSchema(filteredSchema);\n      } else {\n        setSchema({ ...schema, title: verb });\n      }\n    }, [verb]\n  )\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Form\n            key={verb}\n            schema={schema}\n            validate={validate}\n            showErrorList={false}\n            onSubmit={randomVerb}\n            widgets={widgets}\n            FieldTemplate={\n              (props) => {\n                return (\n                  <div>\n                    {props.children}\n                    {props.errors}\n                  </div>\n                );\n            }}\n          />\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Navbar from 'react-bootstrap/Navbar';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>Donne with Finnish</Navbar.Brand>\n    </Navbar>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}